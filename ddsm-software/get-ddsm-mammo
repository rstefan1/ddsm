#!/usr/bin/ruby

# This program gets a specified mammogram from the DDSM website and
# converts it to a PNG image. See the help message for full details.


# Specify the name of the info-file.
def info_file_name
  'info-file.txt'
end


# Return the string input with the system's filesep at the end; if there
# is one there already then return input.
def ensure_filesep_terminated(input)
  if input[input.length-1].chr != File::SEPARATOR
    input += File::SEPARATOR
  end

  return input
end


# Check program input; input is the program input (i.e ARGV).
def check_inputs(input)
  if input.length != 1
    puts get_help
    exit(-1)
  end
  
  # See if the user wanted the help docs.
  if input[0] == '--help'
      puts get_help
      exit(-1)
  end

end


# Given a line from a .ics file, return a string that specifies the
# number of rows and cols in the image described by the line. The
# string would be '123 456' if the image has 123 rows and 456 cols.
def get_image_dims(line)
  rows = line[/.+LINES\s\d+/][/\d+/]
  cols = line[/.+PIXELS_PER_LINE\s\d+/][/PIXELS_PER_LINE\s\d+/][/\d+/]

  return rows + ' ' + cols
end


# Given an image name and a string representing the location of a
# local .ics file, get the image dimensions and digitizer name for
# image_name. Return a hash which :image_dims maps to a string of the
# image dims (which would be '123 456' if the image has 123 rows and
# 456 cols) and :digitizer maps to the digitizer name. If we can't
# determine the dimensions and/or digitizer name, the corresponding
# entry in the hash will be nil.
def get_image_dims_and_digitizer(image_name, ics_file)
  # Get the name of the image view (e.g. 'RIGHT_CC')
  image_view = image_name[image_name.rindex('.')+1..image_name.length-1]

  image_dims = nil
  digitizer = nil

  # Read the image dimensions and digitizer name from the file.
  File.open(ics_file, 'r') do |file|
    file.each_line do |line|
      if !line[/#{image_view}.+/].nil?
        # Read the image dimensions
        image_dims = get_image_dims(line)
      end
      if !line[/DIGITIZER.+/].nil?
        # Read the digitizer type from the file.
        digitizer = line.split[1].downcase # Get the second word in the DIGITIZER line.

        # There are two types of Howtek scanner and they are
        # distinguished by the first letter in image_name.
        if digitizer == 'howtek'
          if image_name[0..0].upcase == 'A'
            digitizer += '-mgh'
          elsif image_name[0..0].upcase == 'D'
            digitizer += '-ismd'
          else
            raise 'Error trying to determine Howtek digitizer variant.'
          end
        end
      end
    end
  end

  # Return an associative array specifying the image dimensions and
  # digitizer used.
  return {:image_dims => image_dims, :digitizer =>digitizer}
end


def get_image_info_from_ics_file(image_name, ics_file)
  # Get the image dimensions and digitizer type for the specified
  # image as a string.
  image_info = get_image_dims_and_digitizer(image_name, ics_file)
  
  # Now output the result to standard output.
  all_ok = !image_info[:image_dims].nil? && !image_info[:digitizer].nil? # Is everything OK?
  if all_ok
    ret_val = image_info[:image_dims] + ' ' + image_info[:digitizer]
  end

  return ret_val
end


# Given the path to the dir containing the jpeg program, the path to a
# LJPEG file, convert it to a PNM file. Return the path to the PNM
# file.
def ljpeg_to_pnm(ljpeg_file, dims_and_digitizer)
  # First convert it to raw format.
  command = "./jpeg -d -s #{ljpeg_file}"
  `#{command}` # Run it.
  raw_file = ljpeg_file + '.1' # The jpeg program adds a .1 suffix.
  
  # See if the .1 file was created.
  if !FileTest.exist?(raw_file)
    raise 'Could not convert from LJPEG to raw.'
  end

  # Now convert the raw file to PNM and delete the raw file.
  command = "./ddsmraw2pnm #{raw_file} #{dims_and_digitizer}"
  pnm_file = `#{command}`
  File.delete(raw_file)
  if $? != 0
    raise 'Could not convert from raw to PNM.'
  end

  # Return the path to the PNM file.
  return pnm_file.split[0]
end


# Convert a PNM file to a PNG file. pnm_file is the path to the pnm file
# and target_png_file is the name of the PNG file that we want created.
def pnm_to_png(pnm_file, target_png_file)
  command = "convert -depth 16 #{pnm_file} #{target_png_file}"
  `#{command}`

  if !FileTest.exist?(target_png_file)
    raise 'Could not convert from PNM to PNG.'
  end

  return target_png_file
end


# The help message
def get_help
  <<END_OF_HELP

  This program gets a specified mammogram from a local mirror of the
  DDSM FTP Server, converts it to a PNG image and saves it to a target
  directory; if the target directory already contains a suitably-named
  file, the download and conversion are skipped.

Call this program using:

  ruby get-ddsm-mammo.rb <root-dir-path>

  (Note: the '\\' simply indicates that the above command should be on
  one line.)

  where:

  * <root-dir-path> is the dir path where LJPEG files exist.

  If successful, the program will print the path to the PNM file of
  the requested mammogram to standard output and will return a status
  code of 0. If unsuccessful, the program should display a
  useful error message and return a non-zero status code.

END_OF_HELP
end



# The entry point of the program.
def main
  # Check to see if the input is sensible.
  check_inputs(ARGV)

  root_dir = ARGV[0]

  if root_dir[-1] != '/'
    root_dir = root_dir + "/"
  end
  
  # get all LJPEG files from the dir
  ljpeg_files = Dir.glob(root_dir + "**/*.LJPEG")
  
  ljpeg_files.each do |ljpeg_file|
    # get image name and ics file name
    s = ljpeg_file.split('/')
    
    image_name = s.pop[0...-6] # delete file extension
    ics_file = Dir.glob(s.join('/') + "/*.ics")[0]
    
    # Get the image dimensions and digitizer name string for the
    # specified image.
    image_info = get_image_info_from_ics_file(image_name, ics_file)

    # Convert the LJPEG file to PNM and delete the original LJPEG.
    pnm_file = ljpeg_to_pnm(ljpeg_file, image_info)

    # # Display the path to the file.
    puts File.expand_path(pnm_file)
  end

  exit(0)
end


# Call the entry point.
main
